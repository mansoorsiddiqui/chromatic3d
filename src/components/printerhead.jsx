/* eslint-disable no-multi-assign */
/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import { useGLTF } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
import { useEffect, useMemo, useRef, useState } from "react";
import useRefs from "react-use-refs";
import * as THREE from "three";

export default function PrinterHead(props) {
  const { currentPage } = props;
  const group = useRef();
  const { nodes, materials } = useGLTF("/printerhead2.gltf");

  const colors = {
    red: new THREE.Color("#ff0000"),
    blue: new THREE.Color("#0000ff"),
    purple: new THREE.Color("#8a08ca"),
  };

  const [redLiquid, blueLiquid, purpleLiquid] = useRefs();

  const [clip, setClip] = useState(0.55);
  const [purpleClip, setPurpleClip] = useState(-1);

  const clippingPlane = useMemo(() => {
    const plane = new THREE.Plane();
    plane.normal.set(0, 1, 0);
    plane.constant = 0.45;
    return plane;
  }, []);

  const clippingPlane2 = useMemo(() => {
    const plane = new THREE.Plane();
    plane.normal.set(0, -1, 0);
    plane.constant = -1;
    return plane;
  }, []);

  materials.ClearPlastic.transparent = true;
  materials.ClearPlastic.depthTest = false;
  materials.ClearPlastic.emissiveIntensity = 0.1;
  materials.ClearPlastic.metalness = 0.8;
  materials.ClearPlastic.roughness = 0.3;
  materials.ClearPlastic.color.setHex(0xaaaaaa);
  materials.ClearPlastic.emissive.setHex(0xbbbbbb);
  materials.RedLiquid.transparent = true;
  materials.BlueLiquid.transparent = true;
  materials.RedLiquid.clippingPlanes = [clippingPlane];
  materials.BlueLiquid.clippingPlanes = [clippingPlane];
  materials.PurpleFluid.clippingPlanes = [clippingPlane2];
  materials.PurpleFluid.transparent = true;
  materials.PurpleFluid.color = colors.purple;

  useFrame(() => {
    redLiquid.current.rotateY(-0.05);
    blueLiquid.current.rotateY(-0.05);
    clippingPlane.constant = THREE.MathUtils.lerp(
      clippingPlane.constant,
      clip,
      0.01
    );
    clippingPlane2.constant = THREE.MathUtils.lerp(
      clippingPlane2.constant,
      purpleClip,
      0.01
    );
  });

  useEffect(() => {
    if (currentPage < 1) {
      setClip(0.5);
      setPurpleClip(-1);
      materials.RedLiquid.color = colors.red;
      materials.BlueLiquid.color = colors.blue;
    } else if (currentPage === 1) {
      setClip(0.58);
      setPurpleClip(-1);
      materials.RedLiquid.color = colors.red;
      materials.BlueLiquid.color = colors.blue;
    } else if (currentPage === 2) {
      setClip(0.6);
      setPurpleClip(-1);
      materials.RedLiquid.color = colors.purple;
      materials.BlueLiquid.color = colors.purple;
    } else if (currentPage === 3) {
      setClip(1);
      setPurpleClip(0);
      materials.RedLiquid.color = colors.purple;
      materials.BlueLiquid.color = colors.purple;
    } else if (currentPage >= 4) {
      setPurpleClip(0);
    }
  }, [currentPage]);

  return (
    <group
      ref={group}
      {...props}
      dispose={null}
      rotation={[0, -Math.PI / 2, 0]}
      position={[0, -0.4, 0]}
    >
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Tip.geometry}
        material={nodes.Tip.material}
        position={[0, -0.03, 0]}
        scale={[0.25, 2.3, 0.25]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cylinder007.geometry}
        material={nodes.Cylinder007.material}
        position={[0, -0.03, 0]}
        scale={[0.25, 2.3, 0.25]}
      />
      <mesh
        ref={redLiquid}
        geometry={nodes.SpiralRed.geometry}
        material={materials.RedLiquid}
        position={[0, -1.77, 0]}
        scale={[0.9, 1, 0.9]}
      />
      <mesh
        ref={blueLiquid}
        geometry={nodes.SpiralBlue.geometry}
        material={materials.BlueLiquid}
        position={[0, -1.77, 0]}
        rotation={[-Math.PI, 0.36, -Math.PI]}
        scale={[0.9, 1, 0.9]}
      />
      <mesh
        ref={purpleLiquid}
        castShadow
        receiveShadow
        geometry={nodes.Fluid.geometry}
        material={materials.PurpleFluid}
        position={[0, -0.03, 0]}
        scale={[0.25, 2.3, 0.25]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Base.geometry}
        material={materials["RobotArm01.Clean"]}
        position={[-1.75, -5.13, -7.74]}
        scale={6.04}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Horizontal_Arm.geometry}
        material={materials["RobotArm01.Clean"]}
        position={[-1.53, 1.93, -9.33]}
        scale={6.04}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Head.geometry}
        material={materials["RobotArm01.Clean"]}
        position={[0, 1.89, 0.1]}
        scale={6.04}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Vertical_Arm.geometry}
        material={materials["RobotArm01.Clean"]}
        position={[-1.75, -5.13, -7.74]}
        rotation={[0.31, -0.08, 0.05]}
        scale={6.04}
      />
    </group>
  );
}

useGLTF.preload("/printerhead1.gltf");
